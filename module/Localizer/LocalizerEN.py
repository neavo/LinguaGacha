from module.Localizer.LocalizerBase import LocalizerBase

class LocalizerEN(LocalizerBase):
    def __init__(self) -> None:
        super().__init__()

        # 通用
        self.add: str = "Add"
        self.edit: str = "Edit"
        self.none: str = "None"
        self.stop: str = "Stop"
        self.start: str = "Start"
        self.close: str = "Close"
        self.alert: str = "Alert"
        self.warning: str = "Warning"
        self.confirm: str = "Confirm"
        self.cancel: str = "Cancel"
        self.enable: str = "Enable"
        self.disable: str = "Disable"
        self.auto: str = "Auto"

        # 日志
        self.log_config_file_not_exist: str = "Configuration file does not exist ..."
        self.log_api_test_failure: str = "API test failed ..."
        self.translator_max_round: str = "Maximum Rounds"
        self.translator_current_round: str = "Current Round"
        self.translator_api_url: str = "API URL"
        self.translator_name: str = "API Name"
        self.translator_model: str = "Model Name"
        self.translator_proxy_url: str = "Active Network Proxy"
        self.translator_prompt: str = "Prompts used for this task:\n{PROMPT}\n"
        self.translator_begin: str = "Translation task is starting, total estimated tasks: {TASKS}, concurrent tasks: {BATCH_SIZE}. Please ensure network connectivity ..."
        self.translator_writing: str = "Writing translation data, please wait ..."
        self.translator_done: str = "All text has been translated, translation task finished ..."
        self.translator_failure: str = "Maximum translation rounds reached, some text is still untranslated, please check the translation results ..."
        self.translator_stop: str = "Translation task stopped ..."
        self.translator_generate_task: str = "Generate Translation Task"
        self.translator_rule_filter: str = "Rule filtering completed, filtered {COUNT} items not requiring translation ..."
        self.translator_mtool_filter: str = "MToolOptimizer preprocessing completed, filtered {COUNT} items containing duplicate clauses ..."
        self.translator_language_filter: str = "Language filtering completed, filtered {COUNT} items not containing the target language ..."
        self.translator_task_response_think: str = "Model's thought process:\n"
        self.translator_task_response_result: str = "Model's response content:\n"
        self.translator_task_failure: str = "Translated text failed inspection, will be retried automatically in the next round of translation"
        self.translator_task_failure_few: str = "Some translated text failed inspection, will be retried automatically in the next round of translation"
        self.translator_task_success: str = "Task time {TIME} seconds, {LINES} lines of text, input tokens {PT}, output tokens {CT}"
        self.file_checker_code: str = "Code check completed, no abnormal items found ..."
        self.file_checker_glossary: str = "Glossary check completed, no abnormal items found ..."
        self.file_checker_translation: str = "Translation status check completed, no abnormal items found ..."

        # Main Page
        self.app_fluent_window_debug_msg: str = "Debug mode is enabled..."
        self.app_fluent_window_close_message_box_content: str = "Are you sure you want to exit the application...?"
        self.app_fluent_window_close_message_box_msg: str = "Main window closed. The application will exit automatically shortly..."
        self.app_fluent_window_theme_btn: str = "Theme"
        self.app_fluent_window_language_btn: str = "Language"
        self.app_fluent_window_app_settings_page: str = "App Settings"
        self.app_fluent_window_platform_page: str = "API"
        self.app_fluent_window_prject_page: str = "Project Settings"
        self.app_fluent_window_translation_page: str = "Start Translation"
        self.app_fluent_window_basic_settings_page: str = "Basic Settings"
        self.app_fluent_window_advance_Feature_page: str = "Advanced Features"
        self.app_fluent_window_prompt_dictionary_page: str = "Glossary"
        self.app_fluent_window_replcae_before_translation_page: str = "Pre-translation Replacement"
        self.app_fluent_window_replcae_after_translation_page: str = "Post-translation Replacement"
        self.app_fluent_window_custom_prompt_navigation_item: str = "Custom Prompt"
        self.app_fluent_window_custom_prompt_zh_page: str = "Chinese Prompt"
        self.app_fluent_window_custom_prompt_en_page: str = "English Prompt"

        # 应用设置
        self.app_settings_page_proxy_url = "Enter network proxy address..."
        self.app_settings_page_proxy_url_title = "Network Proxy Address"
        self.app_settings_page_proxy_url_content = "When enabled, requests will be sent through the specified proxy address, e.g., http://127.0.0.1:7890"
        self.app_settings_page_font_hinting_title = "Font Optimization"
        self.app_settings_page_font_hinting_content = "When enabled, font edges will render more smoothly (takes effect after restart)"
        self.app_settings_page_debug_title = "Debug Mode"
        self.app_settings_page_debug_content = "When enabled, additional debug information will be displayed"
        self.app_settings_page_scale_factor_title = "Global Scaling Factor"
        self.app_settings_page_scale_factor_content = "When enabled, the application interface will scale according to the selected ratio (takes effect after restart)"

        # API Management
        self.platform_page_api_test_doing: str = "API testing in progress. Please try again later..."
        self.platform_page_api_test_result: str = "API test results: {SUCCESS} succeeded, {FAILURE} failed..."
        self.platform_page_api_activate: str = "Activate API"
        self.platform_page_api_edit: str = "Edit API"
        self.platform_page_api_args: str = "Edit Parameters"
        self.platform_page_api_test: str = "Test API"
        self.platform_page_api_delete: str = "Delete API"
        self.platform_page_widget_add_title: str = "API List"
        self.platform_page_widget_add_content: str = "Add and manage LLM model APIs compatible with OpenAI/Anthropic formats here"

        # API Editing
        self.platform_edit_page_widget_name: str = "Enter API name..."
        self.platform_edit_page_widget_name_title: str = "API Name"
        self.platform_edit_page_widget_name_content: str = "Display name for internal use only"
        self.platform_edit_page_widget_api_url: str = "Enter API endpoint..."
        self.platform_edit_page_widget_api_url_title: str = "API Endpoint"
        self.platform_edit_page_widget_api_url_content: str = "Note whether /v1 suffix is required"
        self.platform_edit_page_widget_api_key: str = "Enter API key..."
        self.platform_edit_page_widget_api_key_title: str = "API Key"
        self.platform_edit_page_widget_api_key_content: str = "Enter multiple keys for rotation, one per line (e.g. sk-d0daba12...)"
        self.platform_edit_page_widget_api_format_title: str = "API Format"
        self.platform_edit_page_widget_api_format_content: str = "Most platforms use OpenAI format, Claude models use Anthropic format"
        self.platform_edit_page_widget_model: str = "Enter model name..."
        self.platform_edit_page_widget_model_title: str = "Model Name"
        self.platform_edit_page_widget_model_content: str = "Current model: {MODEL}"
        self.platform_edit_page_widget_model_edit: str = "Manual Input"
        self.platform_edit_page_widget_model_sync: str = "Sync Online"

        # Parameter Editing
        self.args_edit_page_widget_top_p_title: str = "top_p"
        self.args_edit_page_widget_top_p_content: str = "Incorrect values may cause errors or abnormal results"
        self.args_edit_page_widget_temperature_title: str = "temperature"
        self.args_edit_page_widget_temperature_content: str = "Incorrect values may cause errors or abnormal results"
        self.args_edit_page_widget_presence_penalty_title: str = "presence_penalty"
        self.args_edit_page_widget_presence_penalty_content: str = "Incorrect values may cause errors or abnormal results"
        self.args_edit_page_widget_frequency_penalty_title: str = "frequency_penalty"
        self.args_edit_page_widget_frequency_penalty_content: str = "Incorrect values may cause errors or abnormal results"
        self.args_edit_page_document_link: str = "View Documentation"

        # Model List
        self.model_list_page_widget_title: str = "Available Models"
        self.model_list_page_widget_content: str = "Click to select model"
        self.model_list_page_widget_failure: str = "Failed to get model list. Please check API configuration..."

        # Project Settings
        self.project_page_widget_source_language_title: str = "Source Language"
        self.project_page_widget_source_language_content: str = "Original text language for current project"
        self.project_page_widget_source_language_items: str = "Chinese,English,Japanese,Korean,Russian"
        self.project_page_widget_target_language_title: str = "Target Language"
        self.project_page_widget_target_language_content: str = "Target translation language for current project"
        self.project_page_widget_target_language_items: str = "Chinese,English,Japanese,Korean,Russian"
        self.project_page_widget_input_folder_title: str = "Input Folder"
        self.project_page_widget_input_folder_content: str = "Current input folder:"
        self.project_page_widget_input_folder_btn: str = "Select Folder"
        self.project_page_widget_output_folder_title: str = "Output Folder (Cannot be the same as input folder)"
        self.project_page_widget_output_folder_content: str = "Current output folder:"
        self.project_page_widget_output_folder_btn: str = "Select Folder"
        self.project_page_widget_traditional_chinese_title: str = "Output Traditional Chinese"
        self.project_page_widget_traditional_chinese_content: str = "When target language is Chinese, use traditional characters"

        # Translation Page
        self.translation_page_status_idle = "Idle"
        self.translation_page_status_api_testing = "Testing"
        self.translation_page_status_translating = "Translating"
        self.translation_page_status_stoping = "Stopping"
        self.translation_page_indeterminate_saving = "Saving cache..."
        self.translation_page_indeterminate_stoping = "Stopping translation task..."
        self.translation_page_card_time = "Total Time"
        self.translation_page_card_remaining_time = "Remaining Time"
        self.translation_page_card_line = "Translated Lines"
        self.translation_page_card_remaining_line = "Remaining Lines"
        self.translation_page_card_speed = "Average Speed"
        self.translation_page_card_token = "Total Tokens"
        self.translation_page_card_task = "Active Tasks"
        self.translation_page_alert_start = "Unfinished tasks will be reset. Confirm to start new translation task...?"
        self.translation_page_alert_pause = "Stopped tasks can be resumed later. Confirm to stop current task...?"
        self.translation_page_continue = "Continue"
        self.translation_page_export = "Export Data"
        self.translation_page_export_toast = "Translation files generated in output folder..."

        # Basic Settings
        self.basic_settings_page_batch_size_title = "Concurrent Tasks"
        self.basic_settings_page_batch_size_content = "Max simultaneous translation tasks. Adjust according to API limits"
        self.basic_settings_page_task_token_limit_title = "Task Length Threshold"
        self.basic_settings_page_task_token_limit_content = "Max tokens per translation request"
        self.basic_settings_page_request_timeout_title = "Request Timeout"
        self.basic_settings_page_request_timeout_content = "Max wait time for API response (seconds)"
        self.basic_settings_page_max_round_title = "Max Translation Rounds"
        self.basic_settings_page_max_round_content = "Restart translation rounds for untranslated entries until complete or max reached"

        # Advanced Features
        self.advance_feature_page_auto_glossary_enable_title = "Auto-complete Glossary (Experimental feature, not supported for SakuraLLM models)"
        self.advance_feature_page_auto_glossary_enable_content = (
            "Automatically analyze and complete missing glossary entries during translation.\n"
            "Designed as supplementary, requires manual glossary to be enabled.\n"
            "May cause adverse effects. Only effective with powerful models like DeepSeek V3/R1."
        )
        self.advance_feature_page_mtool_optimizer_enable_title = "MTool Optimizer"
        self.advance_feature_page_mtool_optimizer_enable_content = (
            "Reduce MTool text translation time and token usage by up to 40%.\n"
            "May cause source text remnants or incoherent sentences. Enable only for MTool translations."
        )

        # Glossary
        self.glossary_page_head_title = "Glossary"
        self.glossary_page_head_content = "Guide translations through terminology control and consistency management"
        self.glossary_page_table_row_01 = "Source Text"
        self.glossary_page_table_row_02 = "Target Text"
        self.glossary_page_table_row_03 = "Description"
        self.glossary_page_import = "Import"
        self.glossary_page_import_toast = "Data imported..."
        self.glossary_page_export = "Export"
        self.glossary_page_export_path = "Exported_Glossary.json"
        self.glossary_page_export_toast = "Data exported to app root directory..."
        self.glossary_page_add = "Add"
        self.glossary_page_add_toast = "New entry added..."
        self.glossary_page_save = "Save"
        self.glossary_page_save_toast = "Data saved..."
        self.glossary_page_reset = "Reset"
        self.glossary_page_reset_toast = "Data reset..."
        self.glossary_page_reset_alert = "Confirm reset to default data...?"
        self.glossary_page_kg = "Quick Generator"
        self.glossary_page_wiki = "Documentation"

        # Pre-translation Replacement
        self.replace_before_translation_page_head_title = "Pre-translation Replacement"
        self.replace_before_translation_page_head_content = (
            "Replace source text patterns before translation (ordered top-down execution).\n"
            "Import Actors.json from RPGMaker MV/MZ data folder to improve translation quality."
        )
        self.replace_before_translation_page_table_row_01 = "Source"
        self.replace_before_translation_page_table_row_02 = "Replacement"
        self.replace_before_translation_page_import = "Import"
        self.replace_before_translation_page_import_toast = "Data imported..."
        self.replace_before_translation_page_export = "Export"
        self.replace_before_translation_page_export_path = "Exported_PreTranslate.json"
        self.replace_before_translation_page_export_toast = "Data exported to app root directory..."
        self.replace_before_translation_page_add = "Add"
        self.replace_before_translation_page_add_toast = "New entry added..."
        self.replace_before_translation_page_save = "Save"
        self.replace_before_translation_page_save_toast = "Data saved..."
        self.replace_before_translation_page_reset = "Reset"
        self.replace_before_translation_page_reset_toast = "Data reset..."
        self.replace_before_translation_page_reset_alert = "Confirm reset to default data...?"
        self.replace_before_translation_page_wiki = "Documentation"

        # Post-translation Replacement
        self.replace_after_translation_page_head_title = "Post-translation Replacement"
        self.replace_after_translation_page_head_content = "Replace target text patterns after translation (ordered top-down execution)"
        self.replace_after_translation_page_table_row_01 = "Source"
        self.replace_after_translation_page_table_row_02 = "Replacement"
        self.replace_after_translation_page_import = "Import"
        self.replace_after_translation_page_import_toast = "Data imported..."
        self.replace_after_translation_page_export = "Export"
        self.replace_after_translation_page_export_path = "Exported_PostTranslate.json"
        self.replace_after_translation_page_export_toast = "Data exported to app root directory..."
        self.replace_after_translation_page_add = "Add"
        self.replace_after_translation_page_add_toast = "New entry added..."
        self.replace_after_translation_page_save = "Save"
        self.replace_after_translation_page_save_toast = "Data saved..."
        self.replace_after_translation_page_reset = "Reset"
        self.replace_after_translation_page_reset_toast = "Data reset..."
        self.replace_after_translation_page_reset_alert = "Confirm reset to default data...?"
        self.replace_after_translation_page_wiki = "Documentation"

        # Custom Prompts - Chinese
        self.custom_prompt_zh_page_head_title = "Custom prompt used when target language is Chinese (not supported for SakuraLLM models)"
        self.custom_prompt_zh_page_head_content = (
            "Add story settings, writing style requirements through custom prompts.\n"
            "Note: Prefix/suffix sections are fixed. Only active when target language is Chinese."
        )
        self.custom_prompt_zh_page_save = "Save"
        self.custom_prompt_zh_page_save_toast = "Data saved..."
        self.custom_prompt_zh_page_reset = "Reset"
        self.custom_prompt_zh_page_reset_toast = "Data reset..."

        # Custom Prompts - English
        self.custom_prompt_en_page_head_title = "Custom prompt used for non-Chinese target languages (not supported for SakuraLLM models)"
        self.custom_prompt_en_page_head_content = (
            "Add story settings, writing style requirements through custom prompts.\n"
            "Note: Prefix/suffix sections are fixed. Only active when target language is non-Chinese."
        )
        self.custom_prompt_en_page_save = "Save"
        self.custom_prompt_en_page_save_toast = "Data saved..."
        self.custom_prompt_en_page_reset = "Reset"
        self.custom_prompt_en_page_reset_toast = "Data reset..."